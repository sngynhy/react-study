💡 Composition(구성)의 의미
여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것.

1. Containment
하위 컴포넌트를 포함하는 형태의 합성 방법.
(예를 들어, sidebar나 dialog같은 box 형태의 컴포넌트는
자신의 하위 컴포넌트를 미리 알 수 없다.
이런 경우 Containment 방법으로 Composition 사용)
> children이라는 props을 사용하여 조합!
    React.createElement(
        type,
        [props],
        [...children]
    )

만약 여러 개의 children 집합이 필요한 경우에는
별도로 props를 정의하여 각각 원하는 컴포넌트를 삽입!

2. Specialization
범용적인 개념을 구별이 되도록 구체화 하는 것.
즉, 범용적으로 사용할 수 있는 컴포넌트를 만들어 놓고
이를 특수화시켜서 컴포넌트를 쓸 수 있는 컴포지션 방법
(예를 들어, WelcomeDialog는 Dialog의 특별한 케이스이다.)
> Composition을 사용하여 Specialization을 구현

👉 Containment와 Specialization을 같이 사용 => ProfileCard.jsx와 Card.jsx 파일 참고

💡 Inheritance(상속)이란?
다른 컴포넌트로부터 상속을 받아 새로운 컴포넌트를 만드는 것.
(Composition과 대비되는 개념)

But,
리액트에서는 Inheritance보다는 Composition을 사용하여 컴포넌트를 개발하는 것을 권장

✔ 결론!
복잡한 컴포넌트를 쪼개서 여러 개의 컴포넌트로 만들고,
만든 컴포넌트들을 조합하여 새로운 컴포넌트를 만들자!

※ 참고) https://legacy.reactjs.org/docs/composition-vs-inheritance.html